{"version":3,"sources":["images/imdb-logo.svg","data/API.tsx","data/services/movieService.tsx","redux-store/movie-list/actions.tsx","redux-store/movie-list/types.tsx","components/MovieDetailsModal/MovieDetailsModal.tsx","components/MoviesDeck/MoviesDeck.tsx","shared/validation-schemas.tsx","components/DataFilters/DataFilters.tsx","containers/App/index.tsx","serviceWorker.ts","data/models/MovieGetDetailsModel.tsx","data/models/Rating.tsx","redux-store/movie-list/reducers.tsx","data/models/MovieSearchResponseModel.tsx","redux-store/index.tsx","index.tsx","images/no-poster-available.jpg"],"names":["module","exports","axios","create","baseURL","searchMovies","title","year","page","config","params","s","undefined","y","API","get","getMovie","imdbID","description","t","i","plot","fetchMovieDetails","dispatch","a","data","type","payload","MovieDetailsModal","props","selectedMovie","useSelector","state","movieList","Title","Released","Runtime","Genre","Actors","Plot","Poster","imdbRating","React","useState","isPlotFull","setIsPlotFull","useDispatch","plotType","Modal","size","aria-labelledby","onExited","centered","Header","closeButton","Container","Row","className","id","Col","Body","Image","src","fluid","onError","e","target","defaultPoster","onClick","role","Footer","xs","imdbLogo","width","MoviesDeck","moviesResponse","movies","Search","Error","movieDetailsModalShow","setMovieDetailsModalShow","sortByParam","sortButton","Button","as","variant","onChange","value","defaultValue","disabled","map","option","key","movie","md","sm","Card","handleMovieClick","Img","Text","Year","show","onHide","searchMoviesValidationSchema","Yup","movieTitle","label","required","min","max","Date","getFullYear","DataFilters","Navbar","bg","sticky","initialValues","validationSchema","onSubmit","values","movieName","yearOfRelease","errors","touched","dirty","handleChange","handleBlur","handleSubmit","isValid","Form","inline","Control","placeholder","name","onBlur","isInvalid","lg","block","App","Boolean","window","location","hostname","match","defaultMovieGetDetailsModel","Rated","Director","Writer","Language","Country","Awards","Ratings","Source","Value","Metascore","imdbVotes","Type","DVD","BoxOffice","Production","Website","Response","initialState","moviesReducer","action","console","log","arraySort","rootReducer","combineReducers","composeEnhancers","composeWithDevTools","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,uC,mRCE5BC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,sDCDJ,SAASC,EAAaC,EAAgBC,EAAeC,GAC1D,IAAIC,EAAS,CACXC,OAAQ,CACNC,EAAGL,QAAgBM,EACnBC,EAAGN,QAAcK,EACjBJ,KAAMA,QAAcI,IAGxB,OAAOE,EAAIC,IAAI,GAAIN,GAGd,SAASO,EACdV,EACAW,EACAC,GAEA,IAAIT,EAAS,CACXC,OAAQ,CACNS,EAAGb,QAAgBM,EACnBQ,EAAGH,QAAkBL,EACrBS,KAAMH,QAA4BN,IAGtC,OAAOE,EAAIC,IAAI,GAAIN,GCPd,SAASa,EAAkBL,EAAgBI,GAChD,8CAAO,WAAOE,GAAP,iBAAAC,EAAA,sEACkBR,OAASJ,EAAWK,EAAQI,GAD9C,uBACGI,EADH,EACGA,KADH,kBAGEF,EAAS,CACdG,KCb6B,sBDc7BC,QAASF,KALN,2CAAP,sD,kEEgGaG,MA3Gf,SAA2BC,GACzB,IAAMC,EAAgBC,aACpB,SAACC,GAAD,OAAqBA,EAAMC,UAAUH,iBAGrCI,EASEJ,EATFI,MACAC,EAQEL,EARFK,SACAC,EAOEN,EAPFM,QACAC,EAMEP,EANFO,MACAC,EAKER,EALFQ,OACAC,EAIET,EAJFS,KACAC,EAGEV,EAHFU,OACAC,EAEEX,EAFFW,WACAxB,EACEa,EADFb,OAb8D,EAgB5ByB,IAAMC,UAAS,GAhBa,mBAgBzDC,EAhByD,KAgB7CC,EAhB6C,KAkB1DtB,EAAWuB,cAEXC,EAAW,CAAC,QAAS,QAM3B,OACE,kBAACC,EAAA,EAAD,iBACMnB,EADN,CAEEoB,KAAK,KACLC,kBAAgB,gCAChBC,SAAU,kBAAMN,GAAc,IAC9BO,UAAQ,IAER,kBAACJ,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACvB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,eACb,kBAACT,EAAA,EAAMd,MAAP,CAAawB,GAAG,iCACbxB,GAGH,kBAACyB,EAAA,EAAD,CAAKF,UAAU,mCACb,0BAAMA,UAAU,8BACd,2BAAItB,QAMd,kBAACa,EAAA,EAAMY,KAAP,KACE,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,CACEC,IAAKtB,EACLiB,UAAU,UACVM,OAAK,EACLC,QAAS,SAACC,GACRA,EAAEC,OAAOJ,IAAMK,QAIrB,kBAACX,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,KACE,uBAAGF,UAAU,oBAAoBlB,GACvB,QAATA,GACC,0BACE6B,QA5CqB,WACnC7C,EAASD,EAAkBL,EAAQ2B,EAAaG,EAAS,GAAKA,EAAS,KACvEF,GAAeD,IA2CDa,UAAU,aACVY,KAAK,UAEJzB,EAAa,YAAc,iBAOxC,kBAACI,EAAA,EAAMsB,OAAP,KACE,kBAACf,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAKY,GAAI,GACP,2BACE,0BAAMd,UAAU,oBAAhB,WADF,IACqDnB,IAGvD,kBAACqB,EAAA,EAAD,CAAKF,UAAU,cACb,2BACE,0BAAMA,UAAU,oBAAhB,YADF,IACsDrB,KAI1D,kBAACoB,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAKY,GAAI,GACP,2BACE,0BAAMd,UAAU,oBAAhB,UADF,IACoDpB,IAGtD,kBAACsB,EAAA,EAAD,CAAKF,UAAU,cACb,kBAACI,EAAA,EAAD,CAAOC,IAAKU,IAAUC,MAAM,OAAOV,OAAK,IAD1C,IAC+CtB,Q,OCF5CiC,MA3Ff,WACE,IAAMC,EAAiB5C,aACrB,SAACC,GAAD,OAAqBA,EAAMC,UAAU2C,UAEvBA,EAAkBD,EAA1BE,OAAgBC,EAAUH,EAAVG,MAJJ,EAMsCpC,IAAMC,UAC9D,GAPkB,mBAMboC,EANa,KAMUC,EANV,KAUdzD,EAAWuB,cAIXmC,EAAclD,aAClB,SAACC,GAAD,OAAqBA,EAAMC,UAAUgD,eAGjCC,EACJ,kBAACC,EAAA,EAAD,CACEC,GAAG,SACHC,QAAQ,UACRC,SAAU,SAACrB,GACT1C,EHNC,CACLG,KCpB6B,oBDqB7BC,QGI4BsC,EAAEC,OAAOqB,SAEnC9B,UAAU,uBACV+B,aAAa,GACbD,MAAON,GAEP,4BAAQM,MAAM,GAAGE,UAAQ,GAAzB,WAjBkB,CAAC,QAAS,OAAQ,UAoBrBC,KAAI,SAACC,EAAQvE,GAC1B,OACE,4BAAQwE,IAAKxE,EAAGmE,MAAOI,GACpBA,OAWX,OACE,oCACE,kBAACnC,EAAA,EAAD,KACGoB,EACC,oCACGM,EACAN,EAAOc,KAAI,SAACG,EAAOzE,GAClB,OACE,kBAACuC,EAAA,EAAD,CAAKiC,IAAKxE,EAAG0E,GAAI,EAAGC,GAAI,GAAItC,UAAU,QACpC,kBAAC0B,EAAA,EAAD,CACEC,GAAIY,IACJX,QAAQ,eACRO,IAAKxE,EACLgD,QAAS,kBAjBF,SAACyB,GACxBtE,EAASD,EAAkBuE,EAAM5E,SACjC+D,GAAyB,GAeMiB,CAAiBJ,IAChC7B,QAAS,SAACC,GACRA,EAAEC,OAAOJ,IAAMK,MAGjB,kBAAC6B,EAAA,EAAKE,IAAN,CAAUb,QAAQ,MAAMvB,IAAK+B,EAAMrD,SACnC,kBAACwD,EAAA,EAAKpC,KAAN,KACE,kBAACoC,EAAA,EAAK9D,MAAN,KAAa2D,EAAM3D,OACnB,kBAAC8D,EAAA,EAAKG,KAAN,KAAYN,EAAMO,OAEpB,kBAACJ,EAAA,EAAK1B,OAAN,WAnBV,KA2BA,kBAACX,EAAA,EAAD,CAAKF,UAAU,eACb,4BAAKqB,GAAgB,kCAK3B,kBAAC,EAAD,CACEuB,KAAMtB,EACNuB,OAAQ,kBAAMtB,GAAyB,Q,mCChGlCuB,EAA+BC,IAAW,CACrDC,WAAYD,MAAaE,MAAM,eAAeC,WAC9CpG,KAAMiG,MAAaI,IAAI,MAAMC,KAAI,IAAIC,MAAOC,eAAeL,MAAM,U,kBC8EpDM,MAzEf,WACE,IAAMzF,EAAWuB,cACjB,OACE,oCACE,kBAACmE,EAAA,EAAD,CAAQC,GAAG,OAAO7B,QAAQ,OAAO8B,OAAO,OACtC,kBAAC,IAAD,CACEC,cAAe,CACbX,WAAY,GACZlG,KAAM,IAER8G,iBAAkBd,EAClBe,SAAU,SAACC,GAAY,ILhB/BC,EACAC,EACAjH,EKekBiG,EAAqBc,EAArBd,WAAYlG,EAASgH,EAAThH,KACpBgB,GLlBViG,EKkB+Bf,ELjB/BgB,EKiB2ClH,ELd3C,uCAAO,WAAOgB,GAAP,iBAAAC,EAAA,sEACkBnB,EAAamH,EAAWC,EAAejH,GADzD,uBACGiB,EADH,EACGA,KADH,kBAGEF,EAAS,CACdG,KCHsB,eDItBC,QAASF,KALN,2CAAP,2DKiBS,gBACC8F,EADD,EACCA,OACAG,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,MACAC,EALD,EAKCA,aACAC,EAND,EAMCA,WACAC,EAPD,EAOCA,aACAC,EARD,EAQCA,QARD,OAUC,kBAACC,EAAA,EAAD,CAAMC,QAAM,EAACZ,SAAUS,GACrB,kBAACE,EAAA,EAAKE,QAAN,CACEzG,KAAK,OACL0G,YAAY,cACZ3E,UAAU,eACV4E,KAAK,aACL/C,SAAUuC,EACVS,OAAQR,EACRvC,MAAOgC,EAAOd,WACduB,QAASL,EAAQlB,aAAeiB,EAAOjB,WACvC8B,YAAab,EAAOjB,aAEtB,kBAACwB,EAAA,EAAKE,QAAN,CACEzG,KAAK,SACLkF,IAAI,OACJC,KAAK,IAAIC,MAAOC,cAChBqB,YAAY,OACZ3E,UAAU,eACV4E,KAAK,OACL/C,SAAUuC,EACVS,OAAQR,EACRvC,MAAOgC,EAAOhH,KACdyH,QAASL,EAAQpH,OAASmH,EAAOnH,KACjCgI,YAAab,EAAOnH,OAGtB,kBAACoD,EAAA,EAAD,MAEA,kBAACA,EAAA,EAAD,CAAK6E,GAAI,EAAG/E,UAAU,IACpB,kBAAC0B,EAAA,EAAD,CACEzD,KAAK,SACL2D,QAAQ,OACR5B,UAAU,eACVgF,OAAK,EACLhD,WAAYuC,GAAWJ,IAEvB,kBAAC,IAAD,CAAa3E,KAAM,KAPrB,mBChDDyF,MAXf,WACE,OACE,yBAAKjF,UAAU,OACb,kBAAC,EAAD,MACA,kBAACF,EAAA,EAAD,KACE,kBAAC,EAAD,SCEYoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCYOC,EAAoD,CAC/D9G,MAAO,GACPkE,KAAM,GACN6C,MAAO,GACP9G,SAAU,GACVC,QAAS,GACTC,MAAO,GACP6G,SAAU,GACVC,OAAQ,GACR7G,OAAQ,GACRC,KAAM,GACN6G,SAAU,GACVC,QAAS,GACTC,OAAQ,GACR9G,OAAQ,GACR+G,QAAS,CCxCkB,CAC3BC,OAAQ,GACRC,MAAO,KDuCPC,UAAW,GACXjH,WAAY,GACZkH,UAAW,GACX1I,OAAQ,GACR2I,KAAM,GACNC,IAAK,GACLC,UAAW,GACXC,WAAY,GACZC,QAAS,GACTC,SAAU,I,iBE3CNC,EAA+B,CACnCtF,OCJuE,CACvEqF,SAAU,SDIVnI,cAAekH,EACf/D,YAAa,IAiCAkF,MA9Bf,WAGmB,IAFjBnI,EAEgB,uDAFRkI,EACRE,EACgB,uCAChB,OAAQA,EAAO1I,MACb,ITdwB,eSetB,OAAO,2BAAKM,GAAZ,IAAmB4C,OAAQwF,EAAOzI,UACpC,ITf+B,sBSgB7B,OAAO,2BAAKK,GAAZ,IAAmBF,cAAesI,EAAOzI,UAC3C,IThB6B,oBSgB7B,IACUkD,EAAW7C,EAAM4C,OAAjBC,OACSI,EAAgBmF,EAAzBzI,QAER,OAAIkD,GACFwF,QAAQC,IAAIC,IAAU1F,EAAQ,CAACI,KACxB,2BACFjD,GADL,IAEE4C,OAAO,2BACF5C,EAAM4C,QADL,IAEJC,OAAQ0F,IAAU1F,EAAQ,CAACI,MAE7BA,iBAGGjD,EACT,QACE,OAAOA,IEvCPwI,EAAcC,0BAAgB,CAClCxI,UAAWkI,IAKPO,EAAmBC,8BAAoB,IAM9BC,EAJDC,sBACZL,EACAE,EAAiBI,0BAAgBC,OCNnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SN4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a,mBOjJ5B7L,EAAOC,QAAU,IAA0B,kD","file":"static/js/main.053c76dd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imdb-logo.40c51136.svg\";","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://www.omdbapi.com/?type=movie&apikey=28eb3de\",\r\n});\r\n","import API from \"./../API\";\r\n\r\nexport function searchMovies(title?: string, year?: string, page?: number) {\r\n  var config = {\r\n    params: {\r\n      s: title ? title : undefined,\r\n      y: year ? year : undefined,\r\n      page: page ? page : undefined,\r\n    },\r\n  };\r\n  return API.get(\"\", config);\r\n}\r\n\r\nexport function getMovie(\r\n  title?: string,\r\n  imdbID?: string,\r\n  description?: string\r\n) {\r\n  var config = {\r\n    params: {\r\n      t: title ? title : undefined,\r\n      i: imdbID ? imdbID : undefined,\r\n      plot: description ? description : undefined,\r\n    },\r\n  };\r\n  return API.get(\"\", config);\r\n}\r\n","import { searchMovies, getMovie } from \"../../data/services/movieService\";\r\nimport { FETCH_MOVIES, FETCH_MOVIE_DETAILS, SET_SORT_BY_PARAM } from \"./types\";\r\n\r\nexport function fetchMovies(\r\n  movieName?: string,\r\n  yearOfRelease?: string,\r\n  page?: number\r\n) {\r\n  return async (dispatch: any) => {\r\n    const { data } = await searchMovies(movieName, yearOfRelease, page);\r\n\r\n    return dispatch({\r\n      type: FETCH_MOVIES,\r\n      payload: data,\r\n    });\r\n  };\r\n}\r\n\r\nexport function fetchMovieDetails(imdbID: string, plot?: string) {\r\n  return async (dispatch: any) => {\r\n    const { data } = await getMovie(undefined, imdbID, plot);\r\n\r\n    return dispatch({\r\n      type: FETCH_MOVIE_DETAILS,\r\n      payload: data,\r\n    });\r\n  };\r\n}\r\n\r\nexport function setSortByParam(param: string) {\r\n  return {\r\n    type: SET_SORT_BY_PARAM,\r\n    payload: param,\r\n  };\r\n}\r\n","import { MovieSearchResponseModel } from \"../../data/models/MovieSearchResponseModel\";\r\nimport { MovieGetDetailsModel } from \"../../data/models/MovieGetDetailsModel\";\r\n\r\nexport interface MovieListState {\r\n  movies: MovieSearchResponseModel;\r\n  selectedMovie: MovieGetDetailsModel;\r\n  sortByParam: string | undefined;\r\n}\r\n\r\nexport const FETCH_MOVIES = \"FETCH_MOVIES\";\r\nexport const FETCH_MOVIE_DETAILS = \"FETCH_MOVIE_DETAILS\";\r\nexport const SET_SORT_BY_PARAM = \"SET_SORT_BY_PARAM\";\r\n\r\ninterface fetchMoviesAction {\r\n  type: typeof FETCH_MOVIES;\r\n  payload: MovieSearchResponseModel;\r\n}\r\n\r\ninterface fetchMovieDetailsAction {\r\n  type: typeof FETCH_MOVIE_DETAILS;\r\n  payload: MovieGetDetailsModel;\r\n}\r\n\r\ninterface setSortByParamAction {\r\n  type: typeof SET_SORT_BY_PARAM;\r\n  payload: string;\r\n}\r\n\r\nexport type MovieStateActionTypes =\r\n  | fetchMoviesAction\r\n  | fetchMovieDetailsAction\r\n  | setSortByParamAction;\r\n","import React from \"react\";\r\nimport { Modal, Image, Container, Row, Col } from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"../../redux-store\";\r\nimport { fetchMovieDetails } from \"../../redux-store/movie-list/actions\";\r\nimport imdbLogo from \"./../../images/imdb-logo.svg\";\r\nimport defaultPoster from \"./../../images/no-poster-available.jpg\";\r\n\r\nfunction MovieDetailsModal(props: { show: boolean; onHide: any }) {\r\n  const selectedMovie = useSelector(\r\n    (state: AppState) => state.movieList.selectedMovie\r\n  );\r\n  const {\r\n    Title,\r\n    Released,\r\n    Runtime,\r\n    Genre,\r\n    Actors,\r\n    Plot,\r\n    Poster,\r\n    imdbRating,\r\n    imdbID,\r\n  } = selectedMovie;\r\n\r\n  const [isPlotFull, setIsPlotFull] = React.useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const plotType = [\"short\", \"full\"];\r\n\r\n  const handleMovieDescriptionChange = () => {\r\n    dispatch(fetchMovieDetails(imdbID, isPlotFull ? plotType[0] : plotType[1]));\r\n    setIsPlotFull(!isPlotFull);\r\n  };\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      onExited={() => setIsPlotFull(false)}\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Container>\r\n          <Row className=\"text-center\">\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              {Title}\r\n            </Modal.Title>\r\n\r\n            <Col className=\"text-right align-bottom my-auto\">\r\n              <span className=\"font-italic font-underline\">\r\n                <u>{Released}</u>\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Container>\r\n          <Row>\r\n            <Image\r\n              src={Poster}\r\n              className=\"mx-auto\"\r\n              fluid\r\n              onError={(e: any) => {\r\n                e.target.src = defaultPoster;\r\n              }}\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <p className=\"font-italic mt-3\">{Plot}</p>\r\n              {Plot !== \"N/A\" && (\r\n                <span\r\n                  onClick={handleMovieDescriptionChange}\r\n                  className=\"text-muted\"\r\n                  role=\"button\"\r\n                >\r\n                  {isPlotFull ? \"Show less\" : \"Show more\"}\r\n                </span>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Container>\r\n          <Row>\r\n            <Col xs={8}>\r\n              <p>\r\n                <span className=\"font-weight-bold\">Actors:</span> {Actors}\r\n              </p>\r\n            </Col>\r\n            <Col className=\"text-right\">\r\n              <p>\r\n                <span className=\"font-weight-bold\">Runtime:</span> {Runtime}\r\n              </p>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={8}>\r\n              <p>\r\n                <span className=\"font-weight-bold\">Genre:</span> {Genre}\r\n              </p>\r\n            </Col>\r\n            <Col className=\"text-right\">\r\n              <Image src={imdbLogo} width=\"40px\" fluid /> {imdbRating}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default MovieDetailsModal;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AppState } from \"../../redux-store/index\";\r\nimport { Button, Card, Row, Col } from \"react-bootstrap\";\r\nimport {\r\n  fetchMovieDetails,\r\n  setSortByParam,\r\n} from \"../../redux-store/movie-list/actions\";\r\nimport MovieDetailsModal from \"../MovieDetailsModal/MovieDetailsModal\";\r\nimport { MovieSearchModel } from \"../../data/models/MovieSearchModel\";\r\nimport defaultPoster from \"./../../images/no-poster-available.jpg\";\r\nimport \"./style.css\";\r\n\r\nfunction MoviesDeck() {\r\n  const moviesResponse = useSelector(\r\n    (state: AppState) => state.movieList.movies\r\n  );\r\n  const { Search: movies, Error } = moviesResponse;\r\n\r\n  const [movieDetailsModalShow, setMovieDetailsModalShow] = React.useState(\r\n    false\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const sortByOptions = [\"Title\", \"Year\", \"imdbID\"];\r\n\r\n  const sortByParam = useSelector(\r\n    (state: AppState) => state.movieList.sortByParam\r\n  );\r\n\r\n  const sortButton = (\r\n    <Button\r\n      as=\"select\"\r\n      variant=\"warning\"\r\n      onChange={(e: any) => {\r\n        dispatch(setSortByParam(e.target.value));\r\n      }}\r\n      className=\"fixed-top sort-input\"\r\n      defaultValue=\"\"\r\n      value={sortByParam}\r\n    >\r\n      <option value=\"\" disabled>\r\n        Sort by\r\n      </option>\r\n      {sortByOptions.map((option, i) => {\r\n        return (\r\n          <option key={i} value={option}>\r\n            {option}\r\n          </option>\r\n        );\r\n      })}\r\n    </Button>\r\n  );\r\n\r\n  const handleMovieClick = (movie: MovieSearchModel) => {\r\n    dispatch(fetchMovieDetails(movie.imdbID));\r\n    setMovieDetailsModalShow(true);\r\n  };\r\n  return (\r\n    <>\r\n      <Row>\r\n        {movies ? (\r\n          <>\r\n            {sortButton}\r\n            {movies.map((movie, i) => {\r\n              return (\r\n                <Col key={i} md={3} sm={12} className=\"my-2\">\r\n                  <Button\r\n                    as={Card}\r\n                    variant=\"outline-info\"\r\n                    key={i}\r\n                    onClick={() => handleMovieClick(movie)}\r\n                    onError={(e: any) => {\r\n                      e.target.src = defaultPoster;\r\n                    }}\r\n                  >\r\n                    <Card.Img variant=\"top\" src={movie.Poster} />\r\n                    <Card.Body>\r\n                      <Card.Title>{movie.Title}</Card.Title>\r\n                      <Card.Text>{movie.Year}</Card.Text>\r\n                    </Card.Body>\r\n                    <Card.Footer></Card.Footer>\r\n                  </Button>\r\n                </Col>\r\n              );\r\n            })}\r\n            )\r\n          </>\r\n        ) : (\r\n          <Col className=\"text-center\">\r\n            <h2>{Error ? Error : \"Type movie title and/or year\"}</h2>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n\r\n      <MovieDetailsModal\r\n        show={movieDetailsModalShow}\r\n        onHide={() => setMovieDetailsModalShow(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MoviesDeck;\r\n","import * as Yup from \"yup\";\r\n\r\nexport const searchMoviesValidationSchema = Yup.object({\r\n  movieTitle: Yup.string().label(\"Movie title\").required(),\r\n  year: Yup.number().min(1800).max(new Date().getFullYear()).label(\"Year\"),\r\n});\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { fetchMovies } from \"../../redux-store/movie-list/actions\";\r\nimport { Navbar, Form, Button, Col } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport { searchMoviesValidationSchema } from \"../../shared/validation-schemas\";\r\nimport \"./style.css\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nfunction DataFilters() {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n        <Formik\r\n          initialValues={{\r\n            movieTitle: \"\",\r\n            year: \"\",\r\n          }}\r\n          validationSchema={searchMoviesValidationSchema}\r\n          onSubmit={(values) => {\r\n            const { movieTitle, year } = values;\r\n            dispatch(fetchMovies(movieTitle, year));\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            dirty,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            isValid,\r\n          }) => (\r\n            <Form inline onSubmit={handleSubmit}>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Movie title\"\r\n                className=\"my-1 mr-sm-2\"\r\n                name=\"movieTitle\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.movieTitle}\r\n                isValid={touched.movieTitle && !errors.movieTitle}\r\n                isInvalid={!!errors.movieTitle}\r\n              />\r\n              <Form.Control\r\n                type=\"number\"\r\n                min=\"1800\"\r\n                max={new Date().getFullYear()}\r\n                placeholder=\"Year\"\r\n                className=\"my-1 mr-sm-2\"\r\n                name=\"year\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.year}\r\n                isValid={touched.year && !errors.year}\r\n                isInvalid={!!errors.year}\r\n              />\r\n\r\n              <Col></Col>\r\n\r\n              <Col lg={2} className=\"\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"info\"\r\n                  className=\"my-1 ml-auto\"\r\n                  block\r\n                  disabled={!(isValid && dirty)}\r\n                >\r\n                  <Icon.Search size={20} /> Search\r\n                </Button>\r\n              </Col>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Navbar>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DataFilters;\r\n","import React from \"react\";\nimport MoviesDeck from \"../../components/MoviesDeck/MoviesDeck\";\nimport { Container } from \"react-bootstrap\";\nimport DataFilters from \"../../components/DataFilters/DataFilters\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DataFilters />\n      <Container>\n        <MoviesDeck />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Rating, defaultRating } from \"./Rating\";\r\n\r\nexport type MovieGetDetailsModel = {\r\n  Title: string;\r\n  Year: string;\r\n  Rated: string;\r\n  Released: string;\r\n  Runtime: string;\r\n  Genre: string;\r\n  Director: string;\r\n  Writer: string;\r\n  Actors: string;\r\n  Plot: string;\r\n  Language: string;\r\n  Country: string;\r\n  Awards: string;\r\n  Poster: string;\r\n  Ratings: Array<Rating>;\r\n  Metascore: string;\r\n  imdbRating: string;\r\n  imdbVotes: string;\r\n  imdbID: string;\r\n  Type: string;\r\n  DVD: string;\r\n  BoxOffice: string;\r\n  Production: string;\r\n  Website: string;\r\n  Response: string;\r\n};\r\n\r\nexport const defaultMovieGetDetailsModel: MovieGetDetailsModel = {\r\n  Title: \"\",\r\n  Year: \"\",\r\n  Rated: \"\",\r\n  Released: \"\",\r\n  Runtime: \"\",\r\n  Genre: \"\",\r\n  Director: \"\",\r\n  Writer: \"\",\r\n  Actors: \"\",\r\n  Plot: \"\",\r\n  Language: \"\",\r\n  Country: \"\",\r\n  Awards: \"\",\r\n  Poster: \"\",\r\n  Ratings: [defaultRating],\r\n  Metascore: \"\",\r\n  imdbRating: \"\",\r\n  imdbVotes: \"\",\r\n  imdbID: \"\",\r\n  Type: \"\",\r\n  DVD: \"\",\r\n  BoxOffice: \"\",\r\n  Production: \"\",\r\n  Website: \"\",\r\n  Response: \"\",\r\n};\r\n","export type Rating = {\r\n  Source: string;\r\n  Value: string;\r\n};\r\n\r\nexport const defaultRating = {\r\n  Source: \"\",\r\n  Value: \"\",\r\n};\r\n","import {\r\n  MovieListState,\r\n  MovieStateActionTypes,\r\n  FETCH_MOVIES,\r\n  FETCH_MOVIE_DETAILS,\r\n  SET_SORT_BY_PARAM,\r\n} from \"./types\";\r\nimport { defaultMovieSearchResponseModel } from \"../../data/models/MovieSearchResponseModel\";\r\nimport { defaultMovieGetDetailsModel } from \"../../data/models/MovieGetDetailsModel\";\r\n\r\nimport arraySort from \"array-sort\";\r\n\r\nconst initialState: MovieListState = {\r\n  movies: defaultMovieSearchResponseModel,\r\n  selectedMovie: defaultMovieGetDetailsModel,\r\n  sortByParam: \"\",\r\n};\r\n\r\nfunction moviesReducer(\r\n  state = initialState,\r\n  action: MovieStateActionTypes\r\n): MovieListState {\r\n  switch (action.type) {\r\n    case FETCH_MOVIES:\r\n      return { ...state, movies: action.payload };\r\n    case FETCH_MOVIE_DETAILS:\r\n      return { ...state, selectedMovie: action.payload };\r\n    case SET_SORT_BY_PARAM:\r\n      const { Search } = state.movies;\r\n      const { payload: sortByParam } = action;\r\n\r\n      if (Search) {\r\n        console.log(arraySort(Search, [sortByParam]));\r\n        return {\r\n          ...state,\r\n          movies: {\r\n            ...state.movies,\r\n            Search: arraySort(Search, [sortByParam]),\r\n          },\r\n          sortByParam,\r\n        };\r\n      }\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default moviesReducer;\r\n","import { MovieSearchModel } from \"./MovieSearchModel\";\r\n\r\nexport type MovieSearchResponseModel = {\r\n  Search?: Array<MovieSearchModel>;\r\n  totalResults?: number;\r\n  Response: string;\r\n  Error?: string;\r\n};\r\n\r\nexport const defaultMovieSearchResponseModel: MovieSearchResponseModel = {\r\n  Response: \"False\",\r\n};\r\n","import { combineReducers, applyMiddleware, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport moviesReducer from \"./movie-list/reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  movieList: moviesReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nconst composeEnhancers = composeWithDevTools({});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App/index\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux-store\";\nimport \"react-bootstrap/dist/react-bootstrap.min.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/no-poster-available.e7d69c9b.jpg\";"],"sourceRoot":""}